Chap 01

1. 리눅스의 시작
리눅스는 핀란드 헬싱키대학교의 학생이었던 리누스 베네딕트 토발즈가 1991년 개발했다. 리눅스 커널에 응용 프로그램을 제공한 것은 GNU 프로젝트이므로 리눅스는 정확하게 표현하면 'GNU/리눅스'이다.

2. 리눅스 배포판
리눅스 커널에 GNU 프로젝트의 여러 응용 프로그램을 적용하여 구성하는 것은 쉬운 작업이 아니었다. 이에 여러 회사와 커뮤니티에서 일반 사용자들이 리눅스를 쉽게 사용할 수 있도록 리눅스 커널과 응용 프로그램으로 구성한 배포판을 제공하기 시작했다. 리눅스 배포판은 크게 레드햇 계열, 데비안 계열, 슬랙웨어 계열로 구분할 수 있다.

3. 우분투 리눅스
우분투는 데비안 GNU/리눅스에 바탕을 두고 있으며, 유니티라는 독자적인 데스크톱 환경을 사용한다. 우분투는 캐노니컬 사의 지원을 받으며 현재는 우분투 재단이 개발을 담당하고 있따.
우분투의 버전은 배포판이 나온 연도와 월로 구성되며, 장기 지원 버전(LTS)과 일반 버전을 구분해서 발표한다. 장기 지원 버전은 네 번에 한 번씩, 즉 2년에 한 번씩 발표된다.

4. 리눅스의 일반적인 특징
-리눅스는 공개 소프트웨어이며 무료로 사용할 수 있다.
-유닉스와의 완벽한 호환성을 유지한다.
-서버용 운영체제로 많이 사용된다.
-편리한 GUI 환경을 제공한다.

5. 리눅스의 구조
리눅스는 크게 커널, 셸, 응용 프로그램으로 구성되어 있다.
-커널: 리눅스의 핵심으로 프로세스 관리, 메모리 관리, 파일 시스템 관리, 장치 관리 등 컴퓨터의 모든 자원을 제어한다.
-셸: 사용자와 커널 사이의 중간자 역할을 한다. 사용자가 입력한 명령을 해석하여 커널에 넘겨주고 결과를 받아 화면에 출력한다. 리눅스는 배시 셸을 기본으로 사용한다.
-응용 프로그램: 각종 프로그래밍 개발 도구, 문서 편집 도구, 네트워크 관련 도구 등 다양한 응용 프로그램을 제공한다.

6. 리눅스 설치
-가상 머신: 가상 머신은 PC에 설치되어 있는 운영체제에 가상의 머신을 생성한 후, 여기에 다른 운영체제를 설치할 수 있도록 해주는 응용 프로그램으로 VMware, 버추얼 PC, 버추얼 박스 등이 있다.
-리눅스 이미지 파일 내려받기: 리눅스를 설치하려면 먼저 리눅스의 이미지 파일(ISO파일)을 내려받아야 한다. 우분투의 경우 www.ubuntu.com에서 내려받는다.

7. 리눅스 터미널 동작 방법
리눅스에서 명령을 사용하려면 터미널을 동작시켜야 한다. 우분투에서는 '검색-> t 검색-> 터미널'의 순서로 터미널을 동작시킬 수 있다.

8. 명령 행 편집과 명령 사용법
우분투 리눅스의 경우, 명령 행에서 문자는 <- 키로 삭제하고 단어는 ctrl+w, 행은 ctrl+u 키로 삭제할 수 있다. 리눅스의 명령은 '명령[옵션][인자]'의 형태로 구성되며, 명령에 따라 사용할 수 있는 옵션이나 인자가 정해져 있다.

9. 기초 명령의 기능
-date 명령: 현재 날짜와 시간을 출력한다.
-clear 명령: 화면을 깨끗이 지운다.
-man 명령: 명령에 대한 자세한 설명을 출력한다.
-passwd 명령: 사용자 계정의 비밀번호를 변경한다.

10. 터미널 종료
exit 명령이나 ctrl+d 키로 터미널을 종료할 수 있다.


Chap 02
1. 파일의 종류
-일반 파일: 데이터를 저장하는 데 주로 사용되며, 텍스트 파일과 바이너리 파일이 있다.
-디렉터리: 파일 시스템을 계층적으로 구성하기 위한 특수 파일이다.
-심벌릭 링크: 다른 파일을 가리키는 특수 파일로 원본 파일의 경로를 파일 내용에 담고 있다.
-장치 파일: 리눅스 시스템에 부착된 장치를 관리하기 위한 특수 파일이다.

2. 디렉터리 표현 기호와 의미
- . : 현재 디렉터리(작업 디렉터리)
- .. : 상위 디렉터리
- ~ : 홈 디렉터리

3. 경로의 종류
-절대 경로: 루트 디렉터리를 기준으로 파일의 위치를 나타낸 것으로, 항상 /으로 시작한다.
-상대 경로: 현재 위치를 기준으로 파일의 위치를 나타낸 것으로, / 이외의 문자로 시작하며 상위 디렉터리는 ..로 표시한다.

4. 디렉터리 사용 명령
-pwd: 현재 작업 디렉터리의 절대 경로를 출력한다.
-cd 디렉터리명: 지정한 디렉터리로 이동한다.
-ls 디렉터리명: 지정한 디렉터리의 내용을 출력한다.
    -ls -l: 파일의 상세 정보를 출력한다.
    -ls -ld: 디렉터리 자체의 상세 정보를 출력한다.
    -ls -F: 파일의 종류를 표시한다.
-mkdir 디렉터리명: 지정한 디렉터리를 생성한다.
-rmdir 디렉터리명 지정한 디렉터리를 삭제한다. 단, 해당 디렉터리가 비어 있어야 한다.

5. 파일 사용 명령
-cat/more/less/tail 파일명: 지정한 텍스트 파일의 내용을 출력한다.
-cp 파일1 파일2: 파일1을 파일2로 복사한다.
-cp 파일 디렉터리: 파일을 디렉터리로 복사한다.
-cp -r 디렉터리1 디렉터리2: 디렉터리1을 디렉터리2로 복사한다. 
-mv 파일1 파일2: 파일1의 이름을 파일2로 변경한다.
-mv 파일명 디렉터리명: 파일을 디렉터리로 이동한다.
-rm 파일명: 지정한 파일을 삭제한다.
-rm -r 디렉터리명: 지정한 디렉터리와 그 하위의 모든 파일을 삭제한다.
-ln 파일1 파일2: 하드 링크를 생성한다.
-ln -s 파일1 파일2: 심벌릭 링크를 생성한다.

6. 파일 링크
기존 파일에 새로운 이름을 붙이는 하드 링크와 원본 파일을 가리키는 심벌릭 링크를 생성하는 명령으로, 복잡한 경로의 파일에 쉽게 접근할 수 있도록 한다.

7. 유용한 파일 관련 명령
-touch 파일: 파일의 최종 접근 시간과 최종 수정 시간을 변경한다. 지정한 파일이 존재하지 않으면 새로 생성한다.
-grep 패턴 파일: 파일에서 지정한 패턴이 있는 행을 찾아 출력한다.
-find 경로 옵션 인자: 지정한 경로에서 옵션에 따라 파일을 검색한다.
-whereis, which: 경로에서 명령의 위치를 검색한다.


Chap 03
1. vi의 동작 모드
vi는 명령 모드와 입력 모드, 마지막 행 모드로 구분된다. 
명령 모드에서 입력한 키는 커서의 이동이나 삭제 같은 명령으로 해석되어 실행된다. 
입력 모드에서 입력한 키는 보통의 편집기처럼 텍스트로 입력된다. 
마지막 행 모드는 화면의 가장 하단으로 커서가 이동하여 특별한 명령을 사용할 수 있는 모드이다.

2. vi의 명령
-기능 / 명령 모드 / 마지막 행 모드
-입력 모드로 이동 / a,i,o,A,I,O
-마지막 모드로 이동 / :,/,?
-커서 이동 / h,j,k,l,H,M,L,$,^,-,=,enter,w,b,enter
-화면 이동 / ^f, ^b, ^u, ^d, ^y, ^e
-저장 및 종료 / ZZ / :q,:q!, :w 파일명, :wq, :wq!
-내용 수정 / r,cw(\cw),s(#s),cc,C
-내용 삭제 / x(#x),dw(#dw),dd(#dd),D / :#d, :<범위>d
-이전 동작 취소 / u, U
-복사 및 붙이기 / yy(#),p,P / :#y, :<범위>y, :pu, :#pu
-화면 재출력 / ^l / :e!
-행 이동 / #G, G / :#, :$
-이전 동작 반복 / .
-아랫행 이어붙이기 / J
-대문자 소문자 바꾸기 / ~
-문자열 검색 / / /문자열, ?문자열, n, N
-문자열 바꾸기 / / :s/문자열1/문자열2/g   :<볌위>s/문자열1/문자열2/g   :<범위>s/문자열1/문자열2/gc
-다른 파일 읽어오기 / / :r 파일명
-다른 파일 편집으로 가기 / / :e 파일명, :n
-셸 명령 실행 / / :!셸 명령, :sh

3. 버퍼 사용
vi에서는 복사하거나 잘라낸 내용을 임시로 버퍼에 저장할 수 있다. 이름이 없는 버퍼를 언네임드 버퍼라 하고, 이름이 있는 버퍼를 네임드 버퍼라 한다. 언네임드 버퍼는 내용을 한 번에 하나씩만 저장하지만 네임드 버퍼는 버퍼별로 다른 값을 저장할 수 있다. 네임드 버퍼는 "+문자 또는 "+숫자의 형태로 사용한다. 숫자를 사용할 경우 숫자 버퍼라고도 한다.
-네임드 버퍼: "a, "b, ... ,"z
-숫자 버퍼: "1, "2 ..."9

4. vi 환경 설정
-set nu: 파일 내용의 각 행에 행 번호를 표시한다. (보이기만 할 뿐 저장되지는 않는다.)
-set nonu: 행 번호를 감춘다.
-set list: 눈에 보이지 않는 특수 문자를 표시한다.(tab:^l, eol:$ 등)
-set nolist: 특수문자를 감춘다.
-set showmode: 현재 모드를 표시한다.
-set noshowmode: 현재 모드를 감춘다.
-set: set로 설정한 모든 vi 환경 설정 값을 출력한다.
-set all: 모든 vi 환경 변수와 현재 값을 출력한다.

vi 환경 설정은 다음 세 가지 방법으로 할 수 있다.
-사용자 홈 디렉터리에 .exrc 파일로 저장한다.
-환경 변수 EXTINIT에 지정한다.
-vi의 마지막 행 모드에서 명령으로 실행할 수 있다.


Chap 04
1. 셸
-셸은 사용자와 리눅스 커널 사이에서 중간자 역할을 수행한다.
-셸은 명령어 해석기 기능, 프로그래밍 기능, 사용자 환경 설정 기능을 제공한다.
-셸의 종류는 본 셸, C 셸, 콘 셸, 배시 셸 등이 있다.
-로그인 셸 지정과 변경 : /etc/passwd 파일에 로그인 셸을 지정하며, chsh 명령으로 변경할 수 있다.

2. 셸 특수 문자
-*: 임의의 문자 또는 문자열 / $ ls t*
-?: 임의의 한 문자 / $ ls t?.txt
-[]: 한 문자 위치를 위한 문자의 범위 표시 / $ ls [0-9]*
-~: 홈 디렉터리 / $ cd ~user1
- -: 이전 작업 디렉터리 / $ cd -
-: : 한 행에 여러 개의 명령 입력 / $ date;ls;pwd
-|: 왼쪽 명령의 결과를 오른쪽 명령의 입력으로 전달 / $ ls -al | more
-'': 모든 셸 문자 무시 / $ echo '$HOME'
-" ": $, `, \을 제외한 모든 셸 문자 무시 / $ echo "$HOME"
-``: 셸 명령 실행 / $ echo `date`
-\: 특수 문자 기능 제거 / $ echo "\$HOME"

3. 입출력 방향 바꾸기(리다이렉션)
-출력 방향 바꾸기 : >, >>
ex. ls -al>ls.out

-오류 방향 바꾸기: 2>
ex. find ~ -name tmp.txt 2> /dev/null

-입력 방향 바꾸기: <
ex. cat < out.txt

4. 셸 변수와 환경 변수
지정한 셸에서만 사용할 수 있는 셸 변수와 전체 셸에서 사용할 수 있는 환경 변수가 있다.
-동작: 설정 방법/예
-변수 정의: [셸 변수]변수 이름=문자열   [환경 변수]export 변수 이름=문자열 / $data=321   $export PS="Linux $"
-변수 정의 해제: unset 변수 / $ unset data
-전체 변수 출력: set, env / $set
-특정 변수 출력: echo $변수 / $echo $HOME

주요 환경 변수는 다음과 같다.
-HISTSIZE: 히스토리 저장 크기
-HOME: 사용자 홈 디렉터리의 절대 경로
-LANG: 사용하는 언어
-HOGNAME: 사용자 계정 이름
-PATH: 명령을 탐색할 경로
-PWD: 작업 디렉터리 절대 경로
-SHELL: 로그인 셸

5. 에일리어스와 히스토리
에일리어스: 명령에 다른 별칭을 붙이는 것이다.
-생성: alias 이름='명령' / $ alias ls='ls -IF'
-해제: unalias 에일리어스 / $ unalias ls

히스토리: 사용한 명령을 기억했다가 재실행하는 기능이다.
-히스토리 목록 보기: history
-이전 명령 불러오기: !c  !120
-명령 편집: 화살표 키를 사용하여 명령을 불러오고 수정할 수 있다.

6. 프롬프트 설정
-프롬프트는 환경 변수 PS1에 값을 지정한다.
-터미널을 제어하는 특수 문자를 사용하면 컬러 프롬프트를 만들 수 있다.
ex. PS1="\[\e[33;45;7m\]\u@\h $ \[\e[0;0m\]"

7. 환경 설정 파일
-시스템 환경 설정 파일과 사용자 환경 설정 파일로 구분된다.
-로그인 시 시스템 환경 설정 파일 -> 사용자 환경 설정 파일 순서로 실행하여 사용자 환경을 설정한다.
-배시 셸의 시스템 환경 설정 파일
    -/etc/profile: 본 셸이나 본 셸과 호환되는 모든 셸에 공통으로 적용되는 .profile 파일이다.
        -배시 셸의 경우 /etc/bash.bashrc 파일을 실행한다.
        -배시 셸이 아닌 경우 프롬프트를 #(root 사용자)나 $(일반 사용자)로 설정한다.
        -/etc/profile.d/*.sh 파일을 실행한다.

    -/etc/bash.bashrc: 시스템 공통으로 적용되는 .bashrc 파일이다.
        -기본 프롬프트를 설정한다.
        -sudo 명령과 관련된 힌트를 설정한다.

    -/etc/profile.d/*.sh: 언어나 명령별로 각각 필요한 환경을 설정한다. 필요시 설정 파일을 추가한다.

-배시 셸의 사용자 환경 설정 파일
    -~/.profile
        -경로 추가 등 사용자가 정의하는 환경을 설정한다.
        -.bashrc 파일이 있으면 실행한다.

    -~/.bashrc
        -히스토리의 크기를 설정한다.
        -기본 에일리어스나 함수 등을 설정한다.

    -~/.bash_aliases: 사용자가 정의한 에일리어스를 별도 파일로 저장한다.
    -~/.bash_logout: 로그아웃 시 실행할 필요가 있는 함수 등을 설정한다.


Chap 05
1. 접근 권한
-파일에는 해당 파일을 읽고 쓰고 실행할 수 있는 권한을 나타내는 속성이 있으며, ls -l 명령으로 이런 접근 권한을 확인할 수 있다.
-접근 권한은 사용자의 파일을 보호하는 가장 기본적인 보안 기능이다.
-접근 권한은 사용자를 소유자, 그룹, 기타 사용자의 세 카테고리로 나누고, 각 카테고리별로 읽기, 쓰기, 실행 권한을 정의한다.

2. 접근 권한의 표기
-접근 권한의 표기는 사용자 카테고리별로 누가 파일을 읽고 쓰고 실행할 수 있는지를 문자로 나타낸 것이다.
-읽기 권한은 r, 쓰기 권한은 w, 실행 권한은 x로 표기하고, 해당 권한이 없는 경우에는 -로 표기한다.
-사용자 카테고리별로 세 가지 권한의 부여 여부를 rwx와 같이 세 문자를 묶어서 표기한다.

3. 기호를 이용한 접근 권한 변경
-chmod 명령으로 접근 권한을 변경할 때 접근 권한을 문자와 기호로 표기하는 것은 기호 모드이다.
-기호 모드에서는 소유자를 u, 그룹을 g, 기타 사용자를 o, 전체 사용자를 a로 표기한다.

4. 숫자를 이용한 접근 권한 변경
-숫자 모드에서는 변경하고자 하는 접근 권한을 숫자 0부터 7로 나타낸다.
-카테고리의 접근 권한을 권한이 있는 것은 1, 없는 것은 0으로 바꾸고 8진수로 환산하여 하나씩 연결하면 8진수 세 자릿수가 된다.
-예를 들어 접근 권한이 rw-r--r--이면 8진수 644로 환산된다. 이를 chmod 명령에 적용하면 'chmod 644 파일명'과 같다.

5. 기본 접근 권한 설정
-리눅스에서는 파일이나 디렉터리를 생성할 때 기본 접근 권한이 자동적으로 설정된다.
-우분투에서 일반 파일의 경우, 기본 접근 권한이 소유자는 읽기, 쓰기이고 그룹과 기타 사용자는 읽기이다.
-우분투에서 디렉터리의 경우, 기본 접근 권한이 소유자는 읽기, 쓰기, 실행이고 그룹과 기타 사용자는 읽기, 실행이다.
-기본 접근 권한을 확인하고 실행하는 데는 umask 명령을 사용한다. 인자 없이 umask 명령만 사용하면 현재 설정된 기본 마스크 값을 보여준다.
-최대 접근 권한과 마스크 값을 비교하여 마스크 값이 1인 권한을 제외하고 기본 접근 권한을 결정한다. 최대 접근 권한에서 마스크 값을 빼면 더 간단하게 계산할 수 있다.
예를 들면 마스크 값이 022일 때 최대 접근 권한인 666에서 022를 빼면 644가 되는데, 이것이 기본 접근 권한이다.

6. 특수 접근 권한
-SetUID: 해당 파일이 실행되는 동안에는 파일을 실행한 사용자의 건한이 아니라 파일 소유자의 권한으로 실행할 수 있도록 한다.
-SetGID: 해당 파일이 실행되는 동안에는 파일을 실행한 사용자의 권한이 아니라 파일 소유 그룹의 권한으로 실행할 수 있도록 한다.
-스티키 비트: 디렉터리에 시트키 비트가 설정되어 있으면 이 디렉터리에는 누구나 파일을 생성할 수 있으며, 파일을 생성한 계정으로 소유자가 설정되고 다른 사용자가 생성한 파일은 삭제할 수 없다.